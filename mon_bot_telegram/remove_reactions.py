import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

# Constantes pour les √©tats de conversation
MAIN_MENU = 0
POST_ACTIONS = 2

async def remove_reactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Retire les r√©actions d'un post"""
    try:
        query = update.callback_query
        await query.answer()
        
        # Extraire l'index du post depuis le callback_data
        post_index = int(query.data.split('_')[-1]) if '_' in query.data else 0
        
        # V√©rifier que le post existe
        if 'posts' not in context.user_data or post_index >= len(context.user_data['posts']):
            await query.edit_message_text(
                "‚ùå Post introuvable.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
        
        # R√©cup√©rer le post
        post = context.user_data['posts'][post_index]
        
        # V√©rifier s'il y a des r√©actions √† supprimer
        if not post.get('reactions'):
            await query.edit_message_text(
                "‚ö†Ô∏è Aucune r√©action √† supprimer pour ce post.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Retour", callback_data="main_menu")
                ]])
            )
            return MAIN_MENU
        
        # Supprimer les r√©actions
        old_reactions = post.get('reactions', [])
        post['reactions'] = []
        
        # Mettre √† jour current_post si n√©cessaire
        if context.user_data.get('current_post_index') == post_index:
            context.user_data['current_post'] = post
        
        # Recr√©er le clavier sans les r√©actions
        keyboard = [
            [InlineKeyboardButton("‚ú® Ajouter des r√©actions", callback_data=f"add_reactions_{post_index}")],
            [InlineKeyboardButton("üîó Ajouter un bouton URL", callback_data=f"add_url_button_{post_index}")],
            [InlineKeyboardButton("üìù Renommer", callback_data=f"rename_post_{post_index}")],
            [InlineKeyboardButton("‚ùå Supprimer", callback_data=f"delete_post_{post_index}")]
        ]
        
        # Ajouter les boutons URL s'ils existent
        if post.get('buttons'):
            url_buttons = []
            for btn in post['buttons']:
                url_buttons.append([InlineKeyboardButton(btn['text'], url=btn['url'])])
            keyboard = url_buttons + keyboard
        
        # Mettre √† jour le message avec le clavier sans r√©actions
        if post["type"] == "photo":
            await query.edit_message_media(
                media=InputMediaPhoto(
                    media=post["content"],
                    caption=post.get("caption")
                ),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif post["type"] == "video":
            # Pour les vid√©os, on ne peut pas √©diter le m√©dia, donc on r√©pond avec un nouveau message
            await query.message.reply_video(
                video=post["content"],
                caption=post.get("caption"),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # On informe l'utilisateur que l'ancien message doit √™tre ignor√©
            await query.edit_message_text(
                "‚úÖ R√©actions supprim√©es. Veuillez utiliser le nouveau message ci-dessous."
            )
        elif post["type"] == "document":
            # Pour les documents, on ne peut pas √©diter le m√©dia, donc on r√©pond avec un nouveau message
            await query.message.reply_document(
                document=post["content"],
                caption=post.get("caption"),
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # On informe l'utilisateur que l'ancien message doit √™tre ignor√©
            await query.edit_message_text(
                "‚úÖ R√©actions supprim√©es. Veuillez utiliser le nouveau message ci-dessous."
            )
        else:  # texte
            await query.edit_message_text(
                text=post["content"],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        # Confirmation
        await query.message.reply_text(
            f"‚úÖ {len(old_reactions)} r√©actions supprim√©es avec succ√®s."
        )
        
        return POST_ACTIONS
        
    except Exception as e:
        logger.error(f"Erreur lors de la suppression des r√©actions: {e}")
        logger.exception("Traceback complet:")
        try:
            await query.edit_message_text(
                "‚ùå Une erreur est survenue lors de la suppression des r√©actions.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
        except:
            # Si on ne peut pas √©diter le message, on r√©pond avec un nouveau message
            await query.message.reply_text(
                "‚ùå Une erreur est survenue lors de la suppression des r√©actions.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è Menu principal", callback_data="main_menu")
                ]])
            )
        return MAIN_MENU 